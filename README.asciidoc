== asciidoctorj-addon
:idprefix: id_ 

image:https://travis-ci.org/forge/asciidoctorj-addon.svg?branch=master["Build Status", link="https://travis-ci.org/forge/asciidoctorj-addon"]

This addon provides *standalone* functionality, and *exports services* for use in other addons. 
        
=== Depends on
[options="header"]
|===
|Addon |Exported |Optional
|resources
|yes
|no
|===

== Setup

This Addon requires the following installation steps.

=== Add configuration to pom.xml 

To use this addon, you must add it as a dependency in the *pom.xml* of your `forge-addon` classified artifact:
(Make sure the dependency is put all the way to the left, and uses 3 spaces for indentation of GAV)
[source,xml]
----
<dependency>
   <groupId>org.jboss.forge.addon</groupId>
   <artifactId>asciidoctorj-addon</artifactId>
   <classifier>forge-addon</classifier>
   <version>${version}</version>
</dependency>
----
== Features
AsciidocFileResource for Asciidoc files:: 
Allows easy manipulation of asciidoc data
+
[source,java]
----
@Inject private ResourceFactory factory;
...
AsciidocFileResource resource = factory.createResource(AsciidocFileResource.class, new File("document.adoc"));
StructuredDocument document = resource.getStructuredDocument(Collections.<String, Object> emptyMap());
ContentPart style_two = document.getPartByStyle("style two");
...
----
+
[TIP] 
====
If your addon uses a container that does not support "@Inject" annotations, services such as the `ResourceFactory` may also be 
accessed via the `AddonRegistry`:
----
Imported<ResourceFactory> imported = addonRegistry.getServices(ResourceFactory.class);
ResourceFactory factory = imported.get();
----
==== 
